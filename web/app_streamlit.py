import streamlit as st
import requests
from datetime import datetime
import os

# Constantes para evitar duplica√ß√£o de strings
METRIC_CARD_OPEN = '<div class="metric-card">'
DIV_CLOSE = '</div>'
RESULT_CONTAINER_OPEN = '<div class="result-container">'

def load_css(file_name):
    """Carrega arquivo CSS externo"""
    css_path = os.path.join(os.path.dirname(__file__), file_name)
    try:
        with open(css_path, 'r', encoding='utf-8') as f:
            css_content = f.read()
        st.markdown(f'<style>{css_content}</style>', unsafe_allow_html=True)
    except FileNotFoundError:
        st.error(f"Arquivo CSS n√£o encontrado: {file_name}")
    except Exception as e:
        st.error(f"Erro ao carregar CSS: {str(e)}")

st.set_page_config(
    page_title="An√°lise de Sentimentos",
    page_icon="https://i.imgur.com/GlOVGYh.png",
    layout="centered",
    initial_sidebar_state="collapsed"
)

# Carrega o CSS externo
load_css('styles.css')

st.markdown("""
<div class="main-header">
    <img src="https://i.imgur.com/XRbAYRH.png" alt="Brain Icon"
         style="width: 120px; height: 120px;">
    <div class="title-wrapper">
        <h1 class="main-title">An√°lise de Sentimentos</h1>
        <p class="main-subtitle">Intelig√™ncia artificial para compreender emo√ß√µes em textos</p>
    </div>
</div>
""", unsafe_allow_html=True)

st.markdown("### üìù Digite seu texto para an√°lise")
st.markdown("Nosso modelo de IA analisar√° o sentimento e fornecer√° uma classifica√ß√£o detalhada.")

user_input = st.text_area(
    "",
    placeholder="Ex: Adorei o produto! A entrega foi r√°pida e o atendimento foi excelente. Recomendo para todos!",
    key="text_input",
    label_visibility="collapsed"
)

if st.button("üîç Analisar Sentimento", type="primary", use_container_width=True, key="analyze_btn"):
    if user_input.strip():
        with st.spinner("ü§ñ Processando com IA..."):
            try:
                response = requests.post(
                    "http://localhost:8000/predict",
                    json={"text": user_input},
                    timeout=10
                )
                
                if response.status_code == 200:
                    result = response.json()
                    confidence = result['confidence'] * 100
                    sentiment = result['sentiment']
                    
                    st.markdown(RESULT_CONTAINER_OPEN, unsafe_allow_html=True)
                    st.markdown("### üìä Resultado da An√°lise")
                    
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.markdown(METRIC_CARD_OPEN, unsafe_allow_html=True)
                        st.metric("üéØ Sentimento", sentiment.upper())
                        st.markdown(DIV_CLOSE, unsafe_allow_html=True)
                    
                    with col2:
                        st.markdown(METRIC_CARD_OPEN, unsafe_allow_html=True)
                        st.metric("üìà Confian√ßa", f"{confidence:.1f}%")
                        st.markdown(DIV_CLOSE, unsafe_allow_html=True)
                    
                    with col3:
                        st.markdown(METRIC_CARD_OPEN, unsafe_allow_html=True)
                        timestamp = datetime.now().strftime("%H:%M")
                        st.metric("‚è∞ Processado", timestamp)
                        st.markdown(DIV_CLOSE, unsafe_allow_html=True)
                    
                    st.markdown("#### N√≠vel de Confian√ßa")
                    progress_bar = st.progress(0)
                    progress_bar.progress(confidence / 100)
                    
                    if sentiment == "positivo":
                        st.markdown('<p class="positive">‚ú® Sentimento positivo detectado! O texto expressa emo√ß√µes favor√°veis.</p>', unsafe_allow_html=True)
                    elif sentiment == "negativo":
                        st.markdown('<p class="negative">‚ö†Ô∏è Sentimento negativo detectado. O texto cont√©m emo√ß√µes desfavor√°veis.</p>', unsafe_allow_html=True)
                    else:
                        st.markdown('<p class="neutral">ü§î Sentimento neutro. O texto n√£o expressa emo√ß√µes claramente definidas.</p>', unsafe_allow_html=True)
                    
                    with st.expander("üîß Detalhes T√©cnicos"):
                        st.json(response.json())
                    
                    st.markdown(DIV_CLOSE, unsafe_allow_html=True)
                
                else:
                    st.error(f"‚ùå Erro na API: {response.status_code}")
            except requests.exceptions.RequestException as e:
                st.error(f"üîå Falha ao conectar com a API: {str(e)}")
    else:
        st.warning("‚ö†Ô∏è Por favor, insira algum texto para an√°lise.")

st.markdown(DIV_CLOSE, unsafe_allow_html=True)

with st.sidebar:
    st.markdown("### ‚ÑπÔ∏è Sobre o Sistema")
    st.markdown("""
    **Tecnologias utilizadas:**
    - ü§ñ Modelo BERT fine-tuned
    - ‚ö° API FastAPI para infer√™ncia
    - üé® Interface Streamlit moderna
    - üîç An√°lise em tempo real
    """)
    
    st.markdown("### üìà Como funciona")
    st.markdown("""
    1. **Digite** seu texto na √°rea principal
    2. **Clique** em analisar para processar
    3. **Visualize** o resultado com confian√ßa
    4. **Explore** os detalhes t√©cnicos
    """)
    
    st.markdown("### üí° Dicas")
    st.markdown("""
    - Textos mais longos geram an√°lises mais precisas
    - O modelo foi treinado em portugu√™s
    - Confian√ßa acima de 80% indica alta precis√£o
    """)

st.markdown(DIV_CLOSE, unsafe_allow_html=True)

st.markdown("""
<div class="footer">
    <p>üöÄ <strong>An√°lise de Sentimentos com IA</strong></p>
    <p>Desenvolvido com ‚ù§Ô∏è para compreender emo√ß√µes em textos</p>
    <p><small>¬© 2025 - {ajof-bmma-gaac-glrm}@cin.ufpe.br</small></p>
</div>
""", unsafe_allow_html=True)